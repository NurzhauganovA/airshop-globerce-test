# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import MarkAsPaidStrategyEnum, TransactionFlowStrategyEnum


class ChannelsList(BaseModel):
    channels: Optional[List["ChannelsListChannels"]]


class ChannelsListChannels(BaseModel):
    id: str
    slug: str
    name: str
    is_active: bool = Field(alias="isActive")
    currency_code: str = Field(alias="currencyCode")
    has_orders: bool = Field(alias="hasOrders")
    private_metadata: List["ChannelsListChannelsPrivateMetadata"] = Field(
        alias="privateMetadata"
    )
    metadata: List["ChannelsListChannelsMetadata"]
    payment_settings: "ChannelsListChannelsPaymentSettings" = Field(
        alias="paymentSettings"
    )
    order_settings: "ChannelsListChannelsOrderSettings" = Field(alias="orderSettings")
    checkout_settings: "ChannelsListChannelsCheckoutSettings" = Field(
        alias="checkoutSettings"
    )


class ChannelsListChannelsPrivateMetadata(BaseModel):
    key: str
    value: str


class ChannelsListChannelsMetadata(BaseModel):
    key: str
    value: str


class ChannelsListChannelsPaymentSettings(BaseModel):
    default_transaction_flow_strategy: TransactionFlowStrategyEnum = Field(
        alias="defaultTransactionFlowStrategy"
    )
    release_funds_for_expired_checkouts: Optional[bool] = Field(
        alias="releaseFundsForExpiredCheckouts"
    )
    checkout_ttl_before_releasing_funds: Optional[Any] = Field(
        alias="checkoutTtlBeforeReleasingFunds"
    )
    checkout_release_funds_cut_off_date: Optional[Any] = Field(
        alias="checkoutReleaseFundsCutOffDate"
    )


class ChannelsListChannelsOrderSettings(BaseModel):
    automatically_confirm_all_new_orders: bool = Field(
        alias="automaticallyConfirmAllNewOrders"
    )
    automatically_fulfill_non_shippable_gift_card: bool = Field(
        alias="automaticallyFulfillNonShippableGiftCard"
    )
    expire_orders_after: Optional[Any] = Field(alias="expireOrdersAfter")
    mark_as_paid_strategy: MarkAsPaidStrategyEnum = Field(alias="markAsPaidStrategy")
    delete_expired_orders_after: Any = Field(alias="deleteExpiredOrdersAfter")
    allow_unpaid_orders: bool = Field(alias="allowUnpaidOrders")
    include_draft_order_in_voucher_usage: bool = Field(
        alias="includeDraftOrderInVoucherUsage"
    )
    draft_order_line_price_freeze_period: Optional[Any] = Field(
        alias="draftOrderLinePriceFreezePeriod"
    )
    use_legacy_line_discount_propagation: bool = Field(
        alias="useLegacyLineDiscountPropagation"
    )


class ChannelsListChannelsCheckoutSettings(BaseModel):
    use_legacy_error_flow: bool = Field(alias="useLegacyErrorFlow")
    automatically_complete_fully_paid_checkouts: bool = Field(
        alias="automaticallyCompleteFullyPaidCheckouts"
    )


ChannelsList.model_rebuild()
ChannelsListChannels.model_rebuild()
