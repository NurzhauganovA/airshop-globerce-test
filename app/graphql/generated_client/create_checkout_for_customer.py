# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AddressTypeEnum, CheckoutErrorCode


class CreateCheckoutForCustomer(BaseModel):
    checkout_create: Optional["CreateCheckoutForCustomerCheckoutCreate"] = Field(
        alias="checkoutCreate"
    )


class CreateCheckoutForCustomerCheckoutCreate(BaseModel):
    created: Optional[bool]
    checkout_errors: List["CreateCheckoutForCustomerCheckoutCreateCheckoutErrors"] = (
        Field(alias="checkoutErrors")
    )
    errors: List["CreateCheckoutForCustomerCheckoutCreateErrors"]
    checkout: Optional["CreateCheckoutForCustomerCheckoutCreateCheckout"]


class CreateCheckoutForCustomerCheckoutCreateCheckoutErrors(BaseModel):
    field: Optional[str]
    message: Optional[str]
    code: CheckoutErrorCode
    variants: Optional[List[str]]
    lines: Optional[List[str]]
    address_type: Optional[AddressTypeEnum] = Field(alias="addressType")


class CreateCheckoutForCustomerCheckoutCreateErrors(BaseModel):
    field: Optional[str]
    message: Optional[str]
    code: CheckoutErrorCode
    variants: Optional[List[str]]
    lines: Optional[List[str]]
    address_type: Optional[AddressTypeEnum] = Field(alias="addressType")


class CreateCheckoutForCustomerCheckoutCreateCheckout(BaseModel):
    id: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    last_change: Any = Field(alias="lastChange")
    voucher_code: Optional[str] = Field(alias="voucherCode")
    email: Optional[str]
    lines: List["CreateCheckoutForCustomerCheckoutCreateCheckoutLines"]
    total_price: "CreateCheckoutForCustomerCheckoutCreateCheckoutTotalPrice" = Field(
        alias="totalPrice"
    )
    subtotal_price: "CreateCheckoutForCustomerCheckoutCreateCheckoutSubtotalPrice" = (
        Field(alias="subtotalPrice")
    )


class CreateCheckoutForCustomerCheckoutCreateCheckoutLines(BaseModel):
    id: str
    quantity: int
    requires_shipping: bool = Field(alias="requiresShipping")
    is_gift: Optional[bool] = Field(alias="isGift")
    variant: "CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariant"


class CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariant(BaseModel):
    id: str
    name: str
    sku: Optional[str]
    track_inventory: bool = Field(alias="trackInventory")
    quantity_limit_per_customer: Optional[int] = Field(alias="quantityLimitPerCustomer")
    channel: Optional[str]
    margin: Optional[int]
    quantity_ordered: Optional[int] = Field(alias="quantityOrdered")
    quantity_available: Optional[int] = Field(alias="quantityAvailable")
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    external_reference: Optional[str] = Field(alias="externalReference")
    channel_listings: Optional[
        List[
            "CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariantChannelListings"
        ]
    ] = Field(alias="channelListings")
    product: "CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariantProduct"


class CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariantChannelListings(
    BaseModel
):
    id: str
    price: Optional[
        "CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariantChannelListingsPrice"
    ]


class CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariantChannelListingsPrice(
    BaseModel
):
    currency: str
    amount: float


class CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariantProduct(BaseModel):
    id: str
    name: str


class CreateCheckoutForCustomerCheckoutCreateCheckoutTotalPrice(BaseModel):
    currency: str
    gross: "CreateCheckoutForCustomerCheckoutCreateCheckoutTotalPriceGross"


class CreateCheckoutForCustomerCheckoutCreateCheckoutTotalPriceGross(BaseModel):
    currency: str
    amount: float


class CreateCheckoutForCustomerCheckoutCreateCheckoutSubtotalPrice(BaseModel):
    currency: str
    gross: "CreateCheckoutForCustomerCheckoutCreateCheckoutSubtotalPriceGross"


class CreateCheckoutForCustomerCheckoutCreateCheckoutSubtotalPriceGross(BaseModel):
    currency: str
    amount: float


CreateCheckoutForCustomer.model_rebuild()
CreateCheckoutForCustomerCheckoutCreate.model_rebuild()
CreateCheckoutForCustomerCheckoutCreateCheckout.model_rebuild()
CreateCheckoutForCustomerCheckoutCreateCheckoutLines.model_rebuild()
CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariant.model_rebuild()
CreateCheckoutForCustomerCheckoutCreateCheckoutLinesVariantChannelListings.model_rebuild()
CreateCheckoutForCustomerCheckoutCreateCheckoutTotalPrice.model_rebuild()
CreateCheckoutForCustomerCheckoutCreateCheckoutSubtotalPrice.model_rebuild()
