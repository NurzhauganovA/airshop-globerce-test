# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    LanguageCodeEnum,
    OrderAuthorizeStatusEnum,
    OrderChargeStatusEnum,
    OrderCreateFromCheckoutErrorCode,
    OrderOriginEnum,
    OrderStatus,
    PaymentChargeStatusEnum,
)


class CreateOrderFromSaleorCheckout(BaseModel):
    order_create_from_checkout: Optional[
        "CreateOrderFromSaleorCheckoutOrderCreateFromCheckout"
    ] = Field(alias="orderCreateFromCheckout")


class CreateOrderFromSaleorCheckoutOrderCreateFromCheckout(BaseModel):
    order: Optional["CreateOrderFromSaleorCheckoutOrderCreateFromCheckoutOrder"]
    errors: List["CreateOrderFromSaleorCheckoutOrderCreateFromCheckoutErrors"]


class CreateOrderFromSaleorCheckoutOrderCreateFromCheckoutOrder(BaseModel):
    id: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    status: OrderStatus
    tracking_client_id: str = Field(alias="trackingClientId")
    shipping_method_name: Optional[str] = Field(alias="shippingMethodName")
    collection_point_name: Optional[str] = Field(alias="collectionPointName")
    number: str
    original: Optional[str]
    origin: OrderOriginEnum
    is_paid: bool = Field(alias="isPaid")
    payment_status: PaymentChargeStatusEnum = Field(alias="paymentStatus")
    payment_status_display: str = Field(alias="paymentStatusDisplay")
    authorize_status: OrderAuthorizeStatusEnum = Field(alias="authorizeStatus")
    charge_status: OrderChargeStatusEnum = Field(alias="chargeStatus")
    tax_exemption: bool = Field(alias="taxExemption")
    shipping_tax_rate: float = Field(alias="shippingTaxRate")
    shipping_tax_class_name: Optional[str] = Field(alias="shippingTaxClassName")
    token: str
    voucher_code: Optional[str] = Field(alias="voucherCode")
    customer_note: str = Field(alias="customerNote")
    redirect_url: Optional[str] = Field(alias="redirectUrl")
    status_display: str = Field(alias="statusDisplay")
    can_finalize: bool = Field(alias="canFinalize")
    user_email: Optional[str] = Field(alias="userEmail")
    is_shipping_required: bool = Field(alias="isShippingRequired")
    language_code: str = Field(alias="languageCode")
    language_code_enum: LanguageCodeEnum = Field(alias="languageCodeEnum")
    discount_name: Optional[str] = Field(alias="discountName")
    translated_discount_name: Optional[str] = Field(alias="translatedDiscountName")
    display_gross_prices: bool = Field(alias="displayGrossPrices")
    external_reference: Optional[str] = Field(alias="externalReference")
    checkout_id: Optional[str] = Field(alias="checkoutId")


class CreateOrderFromSaleorCheckoutOrderCreateFromCheckoutErrors(BaseModel):
    field: Optional[str]
    message: Optional[str]
    code: OrderCreateFromCheckoutErrorCode
    variants: Optional[List[str]]
    lines: Optional[List[str]]


CreateOrderFromSaleorCheckout.model_rebuild()
CreateOrderFromSaleorCheckoutOrderCreateFromCheckout.model_rebuild()
