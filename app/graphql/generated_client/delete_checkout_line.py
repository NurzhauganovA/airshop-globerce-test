# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AddressTypeEnum,
    CheckoutAuthorizeStatusEnum,
    CheckoutChargeStatusEnum,
    CheckoutErrorCode,
    LanguageCodeEnum,
)


class DeleteCheckoutLine(BaseModel):
    checkout_line_delete: Optional["DeleteCheckoutLineCheckoutLineDelete"] = Field(
        alias="checkoutLineDelete"
    )


class DeleteCheckoutLineCheckoutLineDelete(BaseModel):
    checkout: Optional["DeleteCheckoutLineCheckoutLineDeleteCheckout"]
    checkout_errors: List["DeleteCheckoutLineCheckoutLineDeleteCheckoutErrors"] = Field(
        alias="checkoutErrors"
    )
    errors: List["DeleteCheckoutLineCheckoutLineDeleteErrors"]


class DeleteCheckoutLineCheckoutLineDeleteCheckout(BaseModel):
    id: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    last_change: Any = Field(alias="lastChange")
    email: Optional[str]
    is_shipping_required: bool = Field(alias="isShippingRequired")
    quantity: int
    stock_reservation_expires: Optional[Any] = Field(alias="stockReservationExpires")
    tax_exemption: bool = Field(alias="taxExemption")
    token: Any
    language_code: LanguageCodeEnum = Field(alias="languageCode")
    display_gross_prices: bool = Field(alias="displayGrossPrices")
    authorize_status: CheckoutAuthorizeStatusEnum = Field(alias="authorizeStatus")
    charge_status: CheckoutChargeStatusEnum = Field(alias="chargeStatus")
    lines: List["DeleteCheckoutLineCheckoutLineDeleteCheckoutLines"]


class DeleteCheckoutLineCheckoutLineDeleteCheckoutLines(BaseModel):
    id: str
    quantity: int
    requires_shipping: bool = Field(alias="requiresShipping")
    is_gift: Optional[bool] = Field(alias="isGift")
    total_price: "DeleteCheckoutLineCheckoutLineDeleteCheckoutLinesTotalPrice" = Field(
        alias="totalPrice"
    )


class DeleteCheckoutLineCheckoutLineDeleteCheckoutLinesTotalPrice(BaseModel):
    currency: str
    gross: "DeleteCheckoutLineCheckoutLineDeleteCheckoutLinesTotalPriceGross"


class DeleteCheckoutLineCheckoutLineDeleteCheckoutLinesTotalPriceGross(BaseModel):
    currency: str
    amount: float


class DeleteCheckoutLineCheckoutLineDeleteCheckoutErrors(BaseModel):
    field: Optional[str]
    message: Optional[str]
    code: CheckoutErrorCode
    variants: Optional[List[str]]
    lines: Optional[List[str]]
    address_type: Optional[AddressTypeEnum] = Field(alias="addressType")


class DeleteCheckoutLineCheckoutLineDeleteErrors(BaseModel):
    field: Optional[str]
    message: Optional[str]
    code: CheckoutErrorCode
    variants: Optional[List[str]]
    lines: Optional[List[str]]
    address_type: Optional[AddressTypeEnum] = Field(alias="addressType")


DeleteCheckoutLine.model_rebuild()
DeleteCheckoutLineCheckoutLineDelete.model_rebuild()
DeleteCheckoutLineCheckoutLineDeleteCheckout.model_rebuild()
DeleteCheckoutLineCheckoutLineDeleteCheckoutLines.model_rebuild()
DeleteCheckoutLineCheckoutLineDeleteCheckoutLinesTotalPrice.model_rebuild()
