# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    CheckoutAuthorizeStatusEnum,
    CheckoutChargeStatusEnum,
    LanguageCodeEnum,
    ProductMediaType,
    WeightUnitsEnum,
)


class GetCustomerCheckoutsByID(BaseModel):
    checkouts: Optional["GetCustomerCheckoutsByIDCheckouts"]


class GetCustomerCheckoutsByIDCheckouts(BaseModel):
    total_count: Optional[int] = Field(alias="totalCount")
    edges: List["GetCustomerCheckoutsByIDCheckoutsEdges"]
    page_info: "GetCustomerCheckoutsByIDCheckoutsPageInfo" = Field(alias="pageInfo")


class GetCustomerCheckoutsByIDCheckoutsEdges(BaseModel):
    cursor: str
    node: "GetCustomerCheckoutsByIDCheckoutsEdgesNode"


class GetCustomerCheckoutsByIDCheckoutsEdgesNode(BaseModel):
    id: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    last_change: Any = Field(alias="lastChange")
    customer_note: str = Field(alias="customerNote")
    note: str
    discount_name: Optional[str] = Field(alias="discountName")
    translated_discount_name: Optional[str] = Field(alias="translatedDiscountName")
    email: Optional[str]
    is_shipping_required: bool = Field(alias="isShippingRequired")
    quantity: int
    stock_reservation_expires: Optional[Any] = Field(alias="stockReservationExpires")
    tax_exemption: bool = Field(alias="taxExemption")
    token: Any
    language_code: LanguageCodeEnum = Field(alias="languageCode")
    display_gross_prices: bool = Field(alias="displayGrossPrices")
    authorize_status: CheckoutAuthorizeStatusEnum = Field(alias="authorizeStatus")
    charge_status: CheckoutChargeStatusEnum = Field(alias="chargeStatus")
    channel: "GetCustomerCheckoutsByIDCheckoutsEdgesNodeChannel"
    lines: List["GetCustomerCheckoutsByIDCheckoutsEdgesNodeLines"]
    subtotal_price: "GetCustomerCheckoutsByIDCheckoutsEdgesNodeSubtotalPrice" = Field(
        alias="subtotalPrice"
    )
    total_price: "GetCustomerCheckoutsByIDCheckoutsEdgesNodeTotalPrice" = Field(
        alias="totalPrice"
    )


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeChannel(BaseModel):
    id: str
    slug: str
    name: str
    is_active: bool = Field(alias="isActive")
    currency_code: str = Field(alias="currencyCode")
    has_orders: bool = Field(alias="hasOrders")


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeLines(BaseModel):
    id: str
    quantity: int
    requires_shipping: bool = Field(alias="requiresShipping")
    is_gift: Optional[bool] = Field(alias="isGift")
    variant: "GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariant"


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariant(BaseModel):
    id: str
    name: str
    sku: Optional[str]
    margin: Optional[int]
    quantity_ordered: Optional[int] = Field(alias="quantityOrdered")
    quantity_available: Optional[int] = Field(alias="quantityAvailable")
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    external_reference: Optional[str] = Field(alias="externalReference")
    channel_listings: Optional[
        List["GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantChannelListings"]
    ] = Field(alias="channelListings")
    product: "GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantProduct"
    weight: Optional["GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantWeight"]
    images: Optional[
        List["GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantImages"]
    ]
    media: Optional[List["GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantMedia"]]


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantChannelListings(BaseModel):
    id: str
    price: Optional[
        "GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantChannelListingsPrice"
    ]


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantChannelListingsPrice(
    BaseModel
):
    currency: str
    amount: float


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantProduct(BaseModel):
    id: str
    seo_title: Optional[str] = Field(alias="seoTitle")
    seo_description: Optional[str] = Field(alias="seoDescription")
    name: str
    description: Optional[Any]
    slug: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    charge_taxes: bool = Field(alias="chargeTaxes")
    rating: Optional[float]
    channel: Optional[str]
    description_json: Optional[Any] = Field(alias="descriptionJson")
    is_available: Optional[bool] = Field(alias="isAvailable")
    available_for_purchase: Optional[Any] = Field(alias="availableForPurchase")
    available_for_purchase_at: Optional[Any] = Field(alias="availableForPurchaseAt")
    is_available_for_purchase: Optional[bool] = Field(alias="isAvailableForPurchase")
    external_reference: Optional[str] = Field(alias="externalReference")


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantWeight(BaseModel):
    unit: WeightUnitsEnum
    value: float


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantImages(BaseModel):
    id: str
    alt: Optional[str]
    sort_order: Optional[int] = Field(alias="sortOrder")
    url: str


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantMedia(BaseModel):
    id: str
    sort_order: Optional[int] = Field(alias="sortOrder")
    alt: str
    type: ProductMediaType
    oembed_data: Any = Field(alias="oembedData")
    url: str
    product_id: Optional[str] = Field(alias="productId")


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeSubtotalPrice(BaseModel):
    currency: str
    gross: "GetCustomerCheckoutsByIDCheckoutsEdgesNodeSubtotalPriceGross"


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeSubtotalPriceGross(BaseModel):
    currency: str
    amount: float


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeTotalPrice(BaseModel):
    currency: str
    gross: "GetCustomerCheckoutsByIDCheckoutsEdgesNodeTotalPriceGross"


class GetCustomerCheckoutsByIDCheckoutsEdgesNodeTotalPriceGross(BaseModel):
    currency: str
    amount: float


class GetCustomerCheckoutsByIDCheckoutsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")
    end_cursor: Optional[str] = Field(alias="endCursor")


GetCustomerCheckoutsByID.model_rebuild()
GetCustomerCheckoutsByIDCheckouts.model_rebuild()
GetCustomerCheckoutsByIDCheckoutsEdges.model_rebuild()
GetCustomerCheckoutsByIDCheckoutsEdgesNode.model_rebuild()
GetCustomerCheckoutsByIDCheckoutsEdgesNodeLines.model_rebuild()
GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariant.model_rebuild()
GetCustomerCheckoutsByIDCheckoutsEdgesNodeLinesVariantChannelListings.model_rebuild()
GetCustomerCheckoutsByIDCheckoutsEdgesNodeSubtotalPrice.model_rebuild()
GetCustomerCheckoutsByIDCheckoutsEdgesNodeTotalPrice.model_rebuild()
