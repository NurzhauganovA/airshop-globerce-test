# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    CheckoutAuthorizeStatusEnum,
    CheckoutChargeStatusEnum,
    LanguageCodeEnum,
    ProductTypeKindEnum,
    ShippingMethodTypeEnum,
    WarehouseClickAndCollectOptionEnum,
    WeightUnitsEnum,
)


class GetFullCheckoutByID(BaseModel):
    checkout: Optional["GetFullCheckoutByIDCheckout"]


class GetFullCheckoutByIDCheckout(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    last_change: Any = Field(alias="lastChange")
    customer_note: str = Field(alias="customerNote")
    note: str
    discount_name: Optional[str] = Field(alias="discountName")
    translated_discount_name: Optional[str] = Field(alias="translatedDiscountName")
    email: Optional[str]
    is_shipping_required: bool = Field(alias="isShippingRequired")
    quantity: int
    stock_reservation_expires: Optional[Any] = Field(alias="stockReservationExpires")
    delivery_method: Optional[
        Annotated[
            Union[
                "GetFullCheckoutByIDCheckoutDeliveryMethodWarehouse",
                "GetFullCheckoutByIDCheckoutDeliveryMethodShippingMethod",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="deliveryMethod")
    tax_exemption: bool = Field(alias="taxExemption")
    token: Any
    language_code: LanguageCodeEnum = Field(alias="languageCode")
    display_gross_prices: bool = Field(alias="displayGrossPrices")
    authorize_status: CheckoutAuthorizeStatusEnum = Field(alias="authorizeStatus")
    charge_status: CheckoutChargeStatusEnum = Field(alias="chargeStatus")
    channel: "GetFullCheckoutByIDCheckoutChannel"
    billing_address: Optional["GetFullCheckoutByIDCheckoutBillingAddress"] = Field(
        alias="billingAddress"
    )
    shipping_address: Optional["GetFullCheckoutByIDCheckoutShippingAddress"] = Field(
        alias="shippingAddress"
    )
    available_shipping_methods: List[
        "GetFullCheckoutByIDCheckoutAvailableShippingMethods"
    ] = Field(alias="availableShippingMethods")
    available_collection_points: List[
        "GetFullCheckoutByIDCheckoutAvailableCollectionPoints"
    ] = Field(alias="availableCollectionPoints")
    lines: List["GetFullCheckoutByIDCheckoutLines"]
    shipping_price: "GetFullCheckoutByIDCheckoutShippingPrice" = Field(
        alias="shippingPrice"
    )
    total_price: "GetFullCheckoutByIDCheckoutTotalPrice" = Field(alias="totalPrice")
    shipping_method: Optional["GetFullCheckoutByIDCheckoutShippingMethod"] = Field(
        alias="shippingMethod"
    )


class GetFullCheckoutByIDCheckoutDeliveryMethodWarehouse(BaseModel):
    typename__: Literal["Warehouse"] = Field(alias="__typename")


class GetFullCheckoutByIDCheckoutDeliveryMethodShippingMethod(BaseModel):
    typename__: Literal["ShippingMethod"] = Field(alias="__typename")
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    type: Optional[ShippingMethodTypeEnum]
    name: str
    description: Optional[Any]
    maximum_delivery_days: Optional[int] = Field(alias="maximumDeliveryDays")
    minimum_delivery_days: Optional[int] = Field(alias="minimumDeliveryDays")
    active: bool
    message: Optional[str]


class GetFullCheckoutByIDCheckoutChannel(BaseModel):
    id: str
    slug: str
    name: str


class GetFullCheckoutByIDCheckoutBillingAddress(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    company_name: str = Field(alias="companyName")
    street_address_1: str = Field(alias="streetAddress1")
    street_address_2: str = Field(alias="streetAddress2")
    city: str
    city_area: str = Field(alias="cityArea")
    postal_code: str = Field(alias="postalCode")
    country_area: str = Field(alias="countryArea")
    phone: Optional[str]
    is_default_shipping_address: Optional[bool] = Field(
        alias="isDefaultShippingAddress"
    )
    is_default_billing_address: Optional[bool] = Field(alias="isDefaultBillingAddress")
    country: "GetFullCheckoutByIDCheckoutBillingAddressCountry"


class GetFullCheckoutByIDCheckoutBillingAddressCountry(BaseModel):
    code: str
    country: str


class GetFullCheckoutByIDCheckoutShippingAddress(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    company_name: str = Field(alias="companyName")
    street_address_1: str = Field(alias="streetAddress1")
    street_address_2: str = Field(alias="streetAddress2")
    city: str
    city_area: str = Field(alias="cityArea")
    postal_code: str = Field(alias="postalCode")
    country_area: str = Field(alias="countryArea")
    phone: Optional[str]
    is_default_shipping_address: Optional[bool] = Field(
        alias="isDefaultShippingAddress"
    )
    is_default_billing_address: Optional[bool] = Field(alias="isDefaultBillingAddress")
    country: "GetFullCheckoutByIDCheckoutShippingAddressCountry"


class GetFullCheckoutByIDCheckoutShippingAddressCountry(BaseModel):
    code: str
    country: str


class GetFullCheckoutByIDCheckoutAvailableShippingMethods(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    type: Optional[ShippingMethodTypeEnum]
    name: str
    description: Optional[Any]
    maximum_delivery_days: Optional[int] = Field(alias="maximumDeliveryDays")
    minimum_delivery_days: Optional[int] = Field(alias="minimumDeliveryDays")
    active: bool
    message: Optional[str]
    maximum_order_weight: Optional[
        "GetFullCheckoutByIDCheckoutAvailableShippingMethodsMaximumOrderWeight"
    ] = Field(alias="maximumOrderWeight")
    minimum_order_weight: Optional[
        "GetFullCheckoutByIDCheckoutAvailableShippingMethodsMinimumOrderWeight"
    ] = Field(alias="minimumOrderWeight")
    price: "GetFullCheckoutByIDCheckoutAvailableShippingMethodsPrice"
    maximum_order_price: Optional[
        "GetFullCheckoutByIDCheckoutAvailableShippingMethodsMaximumOrderPrice"
    ] = Field(alias="maximumOrderPrice")
    minimum_order_price: Optional[
        "GetFullCheckoutByIDCheckoutAvailableShippingMethodsMinimumOrderPrice"
    ] = Field(alias="minimumOrderPrice")


class GetFullCheckoutByIDCheckoutAvailableShippingMethodsMaximumOrderWeight(BaseModel):
    unit: WeightUnitsEnum
    value: float


class GetFullCheckoutByIDCheckoutAvailableShippingMethodsMinimumOrderWeight(BaseModel):
    unit: WeightUnitsEnum
    value: float


class GetFullCheckoutByIDCheckoutAvailableShippingMethodsPrice(BaseModel):
    currency: str
    amount: float


class GetFullCheckoutByIDCheckoutAvailableShippingMethodsMaximumOrderPrice(BaseModel):
    currency: str
    amount: float


class GetFullCheckoutByIDCheckoutAvailableShippingMethodsMinimumOrderPrice(BaseModel):
    currency: str
    amount: float


class GetFullCheckoutByIDCheckoutAvailableCollectionPoints(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    name: str
    slug: str
    email: str
    is_private: bool = Field(alias="isPrivate")
    company_name: str = Field(alias="companyName")
    click_and_collect_option: WarehouseClickAndCollectOptionEnum = Field(
        alias="clickAndCollectOption"
    )
    external_reference: Optional[str] = Field(alias="externalReference")
    address: "GetFullCheckoutByIDCheckoutAvailableCollectionPointsAddress"


class GetFullCheckoutByIDCheckoutAvailableCollectionPointsAddress(BaseModel):
    id: str
    metafields: Optional[Any]
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    company_name: str = Field(alias="companyName")
    street_address_1: str = Field(alias="streetAddress1")
    street_address_2: str = Field(alias="streetAddress2")
    city: str
    city_area: str = Field(alias="cityArea")
    postal_code: str = Field(alias="postalCode")
    country_area: str = Field(alias="countryArea")
    phone: Optional[str]
    is_default_shipping_address: Optional[bool] = Field(
        alias="isDefaultShippingAddress"
    )
    is_default_billing_address: Optional[bool] = Field(alias="isDefaultBillingAddress")
    country: "GetFullCheckoutByIDCheckoutAvailableCollectionPointsAddressCountry"


class GetFullCheckoutByIDCheckoutAvailableCollectionPointsAddressCountry(BaseModel):
    code: str
    country: str


class GetFullCheckoutByIDCheckoutLines(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    quantity: int
    requires_shipping: bool = Field(alias="requiresShipping")
    problems: Optional[
        List[
            Annotated[
                Union[
                    "GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemInsufficientStock",
                    "GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemVariantNotAvailable",
                ],
                Field(discriminator="typename__"),
            ]
        ]
    ]
    is_gift: Optional[bool] = Field(alias="isGift")
    variant: "GetFullCheckoutByIDCheckoutLinesVariant"
    total_price: "GetFullCheckoutByIDCheckoutLinesTotalPrice" = Field(
        alias="totalPrice"
    )


class GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemInsufficientStock(
    BaseModel
):
    typename__: Literal["CheckoutLineProblemInsufficientStock"] = Field(
        alias="__typename"
    )


class GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemVariantNotAvailable(
    BaseModel
):
    typename__: Literal["CheckoutLineProblemVariantNotAvailable"] = Field(
        alias="__typename"
    )
    line: "GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemVariantNotAvailableLine"


class GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemVariantNotAvailableLine(
    BaseModel
):
    id: str
    metafields: Optional[Any]
    quantity: int
    requires_shipping: bool = Field(alias="requiresShipping")
    is_gift: Optional[bool] = Field(alias="isGift")
    variant: "GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemVariantNotAvailableLineVariant"


class GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemVariantNotAvailableLineVariant(
    BaseModel
):
    id: str
    metafields: Optional[Any]
    name: str
    sku: Optional[str]
    margin: Optional[int]
    quantity_ordered: Optional[int] = Field(alias="quantityOrdered")
    quantity_available: Optional[int] = Field(alias="quantityAvailable")
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    external_reference: Optional[str] = Field(alias="externalReference")


class GetFullCheckoutByIDCheckoutLinesVariant(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    name: str
    sku: Optional[str]
    track_inventory: bool = Field(alias="trackInventory")
    quantity_limit_per_customer: Optional[int] = Field(alias="quantityLimitPerCustomer")
    channel: Optional[str]
    margin: Optional[int]
    quantity_ordered: Optional[int] = Field(alias="quantityOrdered")
    quantity_available: Optional[int] = Field(alias="quantityAvailable")
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    external_reference: Optional[str] = Field(alias="externalReference")
    product: "GetFullCheckoutByIDCheckoutLinesVariantProduct"
    weight: Optional["GetFullCheckoutByIDCheckoutLinesVariantWeight"]
    channel_listings: Optional[
        List["GetFullCheckoutByIDCheckoutLinesVariantChannelListings"]
    ] = Field(alias="channelListings")


class GetFullCheckoutByIDCheckoutLinesVariantProduct(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    seo_title: Optional[str] = Field(alias="seoTitle")
    seo_description: Optional[str] = Field(alias="seoDescription")
    name: str
    description: Optional[Any]
    slug: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    charge_taxes: bool = Field(alias="chargeTaxes")
    rating: Optional[float]
    channel: Optional[str]
    description_json: Optional[Any] = Field(alias="descriptionJson")
    is_available: Optional[bool] = Field(alias="isAvailable")
    available_for_purchase: Optional[Any] = Field(alias="availableForPurchase")
    available_for_purchase_at: Optional[Any] = Field(alias="availableForPurchaseAt")
    is_available_for_purchase: Optional[bool] = Field(alias="isAvailableForPurchase")
    external_reference: Optional[str] = Field(alias="externalReference")
    product_type: "GetFullCheckoutByIDCheckoutLinesVariantProductProductType" = Field(
        alias="productType"
    )
    thumbnail: Optional["GetFullCheckoutByIDCheckoutLinesVariantProductThumbnail"]
    weight: Optional["GetFullCheckoutByIDCheckoutLinesVariantProductWeight"]


class GetFullCheckoutByIDCheckoutLinesVariantProductProductType(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    name: str
    slug: str
    has_variants: bool = Field(alias="hasVariants")
    is_shipping_required: bool = Field(alias="isShippingRequired")
    is_digital: bool = Field(alias="isDigital")
    kind: ProductTypeKindEnum


class GetFullCheckoutByIDCheckoutLinesVariantProductThumbnail(BaseModel):
    url: str
    alt: Optional[str]


class GetFullCheckoutByIDCheckoutLinesVariantProductWeight(BaseModel):
    unit: WeightUnitsEnum
    value: float


class GetFullCheckoutByIDCheckoutLinesVariantWeight(BaseModel):
    unit: WeightUnitsEnum
    value: float


class GetFullCheckoutByIDCheckoutLinesVariantChannelListings(BaseModel):
    id: str
    margin: Optional[int]
    price: Optional["GetFullCheckoutByIDCheckoutLinesVariantChannelListingsPrice"]
    channel: "GetFullCheckoutByIDCheckoutLinesVariantChannelListingsChannel"


class GetFullCheckoutByIDCheckoutLinesVariantChannelListingsPrice(BaseModel):
    currency: str
    amount: float


class GetFullCheckoutByIDCheckoutLinesVariantChannelListingsChannel(BaseModel):
    metafields: Optional[Any]
    slug: str
    name: str
    is_active: bool = Field(alias="isActive")
    currency_code: str = Field(alias="currencyCode")
    has_orders: bool = Field(alias="hasOrders")


class GetFullCheckoutByIDCheckoutLinesTotalPrice(BaseModel):
    currency: str
    gross: "GetFullCheckoutByIDCheckoutLinesTotalPriceGross"


class GetFullCheckoutByIDCheckoutLinesTotalPriceGross(BaseModel):
    currency: str
    amount: float


class GetFullCheckoutByIDCheckoutShippingPrice(BaseModel):
    currency: str
    gross: "GetFullCheckoutByIDCheckoutShippingPriceGross"


class GetFullCheckoutByIDCheckoutShippingPriceGross(BaseModel):
    currency: str
    amount: float


class GetFullCheckoutByIDCheckoutTotalPrice(BaseModel):
    currency: str
    gross: "GetFullCheckoutByIDCheckoutTotalPriceGross"


class GetFullCheckoutByIDCheckoutTotalPriceGross(BaseModel):
    currency: str
    amount: float


class GetFullCheckoutByIDCheckoutShippingMethod(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    type: Optional[ShippingMethodTypeEnum]
    name: str
    description: Optional[Any]
    maximum_delivery_days: Optional[int] = Field(alias="maximumDeliveryDays")
    minimum_delivery_days: Optional[int] = Field(alias="minimumDeliveryDays")
    active: bool
    message: Optional[str]


GetFullCheckoutByID.model_rebuild()
GetFullCheckoutByIDCheckout.model_rebuild()
GetFullCheckoutByIDCheckoutBillingAddress.model_rebuild()
GetFullCheckoutByIDCheckoutShippingAddress.model_rebuild()
GetFullCheckoutByIDCheckoutAvailableShippingMethods.model_rebuild()
GetFullCheckoutByIDCheckoutAvailableCollectionPoints.model_rebuild()
GetFullCheckoutByIDCheckoutAvailableCollectionPointsAddress.model_rebuild()
GetFullCheckoutByIDCheckoutLines.model_rebuild()
GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemVariantNotAvailable.model_rebuild()
GetFullCheckoutByIDCheckoutLinesProblemsCheckoutLineProblemVariantNotAvailableLine.model_rebuild()
GetFullCheckoutByIDCheckoutLinesVariant.model_rebuild()
GetFullCheckoutByIDCheckoutLinesVariantProduct.model_rebuild()
GetFullCheckoutByIDCheckoutLinesVariantChannelListings.model_rebuild()
GetFullCheckoutByIDCheckoutLinesTotalPrice.model_rebuild()
GetFullCheckoutByIDCheckoutShippingPrice.model_rebuild()
GetFullCheckoutByIDCheckoutTotalPrice.model_rebuild()
