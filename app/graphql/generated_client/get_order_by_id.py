# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    DiscountValueTypeEnum,
    LanguageCodeEnum,
    OrderAction,
    OrderAuthorizeStatusEnum,
    OrderChargeStatusEnum,
    OrderOriginEnum,
    OrderStatus,
    PaymentChargeStatusEnum,
)


class GetOrderByID(BaseModel):
    order: Optional["GetOrderByIDOrder"]


class GetOrderByIDOrder(BaseModel):
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    status: OrderStatus
    tracking_client_id: str = Field(alias="trackingClientId")
    shipping_method_name: Optional[str] = Field(alias="shippingMethodName")
    collection_point_name: Optional[str] = Field(alias="collectionPointName")
    actions: List[OrderAction]
    number: str
    original: Optional[str]
    origin: OrderOriginEnum
    is_paid: bool = Field(alias="isPaid")
    payment_status: PaymentChargeStatusEnum = Field(alias="paymentStatus")
    payment_status_display: str = Field(alias="paymentStatusDisplay")
    authorize_status: OrderAuthorizeStatusEnum = Field(alias="authorizeStatus")
    charge_status: OrderChargeStatusEnum = Field(alias="chargeStatus")
    tax_exemption: bool = Field(alias="taxExemption")
    shipping_tax_class_name: Optional[str] = Field(alias="shippingTaxClassName")
    token: str
    voucher_code: Optional[str] = Field(alias="voucherCode")
    customer_note: str = Field(alias="customerNote")
    redirect_url: Optional[str] = Field(alias="redirectUrl")
    status_display: str = Field(alias="statusDisplay")
    can_finalize: bool = Field(alias="canFinalize")
    user_email: Optional[str] = Field(alias="userEmail")
    is_shipping_required: bool = Field(alias="isShippingRequired")
    language_code: str = Field(alias="languageCode")
    language_code_enum: LanguageCodeEnum = Field(alias="languageCodeEnum")
    discount_name: Optional[str] = Field(alias="discountName")
    translated_discount_name: Optional[str] = Field(alias="translatedDiscountName")
    display_gross_prices: bool = Field(alias="displayGrossPrices")
    external_reference: Optional[str] = Field(alias="externalReference")
    checkout_id: Optional[str] = Field(alias="checkoutId")
    lines: List["GetOrderByIDOrderLines"]
    shipping_price: "GetOrderByIDOrderShippingPrice" = Field(alias="shippingPrice")
    total: "GetOrderByIDOrderTotal"
    channel: "GetOrderByIDOrderChannel"
    billing_address: Optional["GetOrderByIDOrderBillingAddress"] = Field(
        alias="billingAddress"
    )
    shipping_address: Optional["GetOrderByIDOrderShippingAddress"] = Field(
        alias="shippingAddress"
    )
    metadata: List["GetOrderByIDOrderMetadata"]


class GetOrderByIDOrderLines(BaseModel):
    id: str
    product_name: str = Field(alias="productName")
    variant_name: str = Field(alias="variantName")
    product_sku: Optional[str] = Field(alias="productSku")
    product_variant_id: Optional[str] = Field(alias="productVariantId")
    is_shipping_required: bool = Field(alias="isShippingRequired")
    quantity: int
    quantity_fulfilled: int = Field(alias="quantityFulfilled")
    tax_rate: float = Field(alias="taxRate")
    unit_discount_reason: Optional[str] = Field(alias="unitDiscountReason")
    unit_discount_value: Any = Field(alias="unitDiscountValue")
    unit_discount_type: Optional[DiscountValueTypeEnum] = Field(
        alias="unitDiscountType"
    )
    is_price_overridden: Optional[bool] = Field(alias="isPriceOverridden")
    translated_product_name: str = Field(alias="translatedProductName")
    translated_variant_name: str = Field(alias="translatedVariantName")
    sale_id: Optional[str] = Field(alias="saleId")
    quantity_to_fulfill: int = Field(alias="quantityToFulfill")
    total_price: "GetOrderByIDOrderLinesTotalPrice" = Field(alias="totalPrice")


class GetOrderByIDOrderLinesTotalPrice(BaseModel):
    currency: str
    gross: "GetOrderByIDOrderLinesTotalPriceGross"


class GetOrderByIDOrderLinesTotalPriceGross(BaseModel):
    currency: str
    amount: float


class GetOrderByIDOrderShippingPrice(BaseModel):
    currency: str
    gross: "GetOrderByIDOrderShippingPriceGross"


class GetOrderByIDOrderShippingPriceGross(BaseModel):
    currency: str
    amount: float


class GetOrderByIDOrderTotal(BaseModel):
    currency: str
    gross: "GetOrderByIDOrderTotalGross"


class GetOrderByIDOrderTotalGross(BaseModel):
    currency: str
    amount: float


class GetOrderByIDOrderChannel(BaseModel):
    id: str
    slug: str
    name: str
    is_active: bool = Field(alias="isActive")
    currency_code: str = Field(alias="currencyCode")
    has_orders: bool = Field(alias="hasOrders")


class GetOrderByIDOrderBillingAddress(BaseModel):
    id: str
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    company_name: str = Field(alias="companyName")
    street_address_1: str = Field(alias="streetAddress1")
    street_address_2: str = Field(alias="streetAddress2")
    city: str
    city_area: str = Field(alias="cityArea")
    postal_code: str = Field(alias="postalCode")
    country_area: str = Field(alias="countryArea")
    phone: Optional[str]
    is_default_shipping_address: Optional[bool] = Field(
        alias="isDefaultShippingAddress"
    )
    is_default_billing_address: Optional[bool] = Field(alias="isDefaultBillingAddress")
    country: "GetOrderByIDOrderBillingAddressCountry"


class GetOrderByIDOrderBillingAddressCountry(BaseModel):
    code: str
    country: str


class GetOrderByIDOrderShippingAddress(BaseModel):
    id: str
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    company_name: str = Field(alias="companyName")
    street_address_1: str = Field(alias="streetAddress1")
    street_address_2: str = Field(alias="streetAddress2")
    city: str
    city_area: str = Field(alias="cityArea")
    postal_code: str = Field(alias="postalCode")
    country_area: str = Field(alias="countryArea")
    phone: Optional[str]
    is_default_shipping_address: Optional[bool] = Field(
        alias="isDefaultShippingAddress"
    )
    is_default_billing_address: Optional[bool] = Field(alias="isDefaultBillingAddress")
    country: "GetOrderByIDOrderShippingAddressCountry"


class GetOrderByIDOrderShippingAddressCountry(BaseModel):
    code: str
    country: str


class GetOrderByIDOrderMetadata(BaseModel):
    key: str
    value: str


GetOrderByID.model_rebuild()
GetOrderByIDOrder.model_rebuild()
GetOrderByIDOrderLines.model_rebuild()
GetOrderByIDOrderLinesTotalPrice.model_rebuild()
GetOrderByIDOrderShippingPrice.model_rebuild()
GetOrderByIDOrderTotal.model_rebuild()
GetOrderByIDOrderBillingAddress.model_rebuild()
GetOrderByIDOrderShippingAddress.model_rebuild()
