# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    LanguageCodeEnum,
    OrderAction,
    OrderAuthorizeStatusEnum,
    OrderChargeStatusEnum,
    OrderOriginEnum,
    OrderStatus,
    PaymentChargeStatusEnum,
)


class GetOrderList(BaseModel):
    orders: Optional["GetOrderListOrders"]


class GetOrderListOrders(BaseModel):
    total_count: Optional[int] = Field(alias="totalCount")
    page_info: "GetOrderListOrdersPageInfo" = Field(alias="pageInfo")
    edges: List["GetOrderListOrdersEdges"]


class GetOrderListOrdersPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")
    end_cursor: Optional[str] = Field(alias="endCursor")


class GetOrderListOrdersEdges(BaseModel):
    cursor: str
    node: "GetOrderListOrdersEdgesNode"


class GetOrderListOrdersEdgesNode(BaseModel):
    id: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    status: OrderStatus
    tracking_client_id: str = Field(alias="trackingClientId")
    shipping_method_name: Optional[str] = Field(alias="shippingMethodName")
    collection_point_name: Optional[str] = Field(alias="collectionPointName")
    actions: List[OrderAction]
    number: str
    original: Optional[str]
    origin: OrderOriginEnum
    is_paid: bool = Field(alias="isPaid")
    payment_status: PaymentChargeStatusEnum = Field(alias="paymentStatus")
    payment_status_display: str = Field(alias="paymentStatusDisplay")
    authorize_status: OrderAuthorizeStatusEnum = Field(alias="authorizeStatus")
    charge_status: OrderChargeStatusEnum = Field(alias="chargeStatus")
    tax_exemption: bool = Field(alias="taxExemption")
    shipping_tax_rate: float = Field(alias="shippingTaxRate")
    shipping_tax_class_name: Optional[str] = Field(alias="shippingTaxClassName")
    token: str
    redirect_url: Optional[str] = Field(alias="redirectUrl")
    status_display: str = Field(alias="statusDisplay")
    can_finalize: bool = Field(alias="canFinalize")
    user_email: Optional[str] = Field(alias="userEmail")
    is_shipping_required: bool = Field(alias="isShippingRequired")
    language_code: str = Field(alias="languageCode")
    language_code_enum: LanguageCodeEnum = Field(alias="languageCodeEnum")
    discount_name: Optional[str] = Field(alias="discountName")
    external_reference: Optional[str] = Field(alias="externalReference")
    checkout_id: Optional[str] = Field(alias="checkoutId")
    total: "GetOrderListOrdersEdgesNodeTotal"
    metadata: List["GetOrderListOrdersEdgesNodeMetadata"]


class GetOrderListOrdersEdgesNodeTotal(BaseModel):
    currency: str
    gross: "GetOrderListOrdersEdgesNodeTotalGross"


class GetOrderListOrdersEdgesNodeTotalGross(BaseModel):
    currency: str
    amount: float


class GetOrderListOrdersEdgesNodeMetadata(BaseModel):
    key: str
    value: str


GetOrderList.model_rebuild()
GetOrderListOrders.model_rebuild()
GetOrderListOrdersEdges.model_rebuild()
GetOrderListOrdersEdgesNode.model_rebuild()
GetOrderListOrdersEdgesNodeTotal.model_rebuild()
