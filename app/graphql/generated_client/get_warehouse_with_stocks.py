# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ProductTypeKindEnum, WarehouseClickAndCollectOptionEnum


class GetWarehouseWithStocks(BaseModel):
    warehouse: Optional["GetWarehouseWithStocksWarehouse"]


class GetWarehouseWithStocksWarehouse(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    name: str
    slug: str
    email: str
    is_private: bool = Field(alias="isPrivate")
    company_name: str = Field(alias="companyName")
    click_and_collect_option: WarehouseClickAndCollectOptionEnum = Field(
        alias="clickAndCollectOption"
    )
    external_reference: Optional[str] = Field(alias="externalReference")
    address: "GetWarehouseWithStocksWarehouseAddress"
    stocks: Optional["GetWarehouseWithStocksWarehouseStocks"]


class GetWarehouseWithStocksWarehouseAddress(BaseModel):
    id: str
    metafields: Optional[Any]
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    company_name: str = Field(alias="companyName")
    street_address_1: str = Field(alias="streetAddress1")
    street_address_2: str = Field(alias="streetAddress2")
    city: str
    city_area: str = Field(alias="cityArea")
    postal_code: str = Field(alias="postalCode")
    country_area: str = Field(alias="countryArea")
    phone: Optional[str]
    is_default_shipping_address: Optional[bool] = Field(
        alias="isDefaultShippingAddress"
    )
    is_default_billing_address: Optional[bool] = Field(alias="isDefaultBillingAddress")


class GetWarehouseWithStocksWarehouseStocks(BaseModel):
    total_count: Optional[int] = Field(alias="totalCount")
    page_info: "GetWarehouseWithStocksWarehouseStocksPageInfo" = Field(alias="pageInfo")
    edges: List["GetWarehouseWithStocksWarehouseStocksEdges"]


class GetWarehouseWithStocksWarehouseStocksPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")
    end_cursor: Optional[str] = Field(alias="endCursor")


class GetWarehouseWithStocksWarehouseStocksEdges(BaseModel):
    cursor: str
    node: "GetWarehouseWithStocksWarehouseStocksEdgesNode"


class GetWarehouseWithStocksWarehouseStocksEdgesNode(BaseModel):
    id: str
    quantity: int
    quantity_allocated: int = Field(alias="quantityAllocated")
    quantity_reserved: int = Field(alias="quantityReserved")
    product_variant: "GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariant" = (
        Field(alias="productVariant")
    )


class GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariant(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    name: str
    sku: Optional[str]
    track_inventory: bool = Field(alias="trackInventory")
    quantity_limit_per_customer: Optional[int] = Field(alias="quantityLimitPerCustomer")
    channel: Optional[str]
    margin: Optional[int]
    quantity_ordered: Optional[int] = Field(alias="quantityOrdered")
    quantity_available: Optional[int] = Field(alias="quantityAvailable")
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    external_reference: Optional[str] = Field(alias="externalReference")
    product: "GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariantProduct"


class GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariantProduct(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    seo_title: Optional[str] = Field(alias="seoTitle")
    seo_description: Optional[str] = Field(alias="seoDescription")
    name: str
    description: Optional[Any]
    slug: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    charge_taxes: bool = Field(alias="chargeTaxes")
    rating: Optional[float]
    channel: Optional[str]
    description_json: Optional[Any] = Field(alias="descriptionJson")
    is_available: Optional[bool] = Field(alias="isAvailable")
    available_for_purchase: Optional[Any] = Field(alias="availableForPurchase")
    available_for_purchase_at: Optional[Any] = Field(alias="availableForPurchaseAt")
    is_available_for_purchase: Optional[bool] = Field(alias="isAvailableForPurchase")
    external_reference: Optional[str] = Field(alias="externalReference")
    product_type: (
        "GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariantProductProductType"
    ) = Field(alias="productType")
    category: Optional[
        "GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariantProductCategory"
    ]


class GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariantProductProductType(
    BaseModel
):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    name: str
    slug: str
    has_variants: bool = Field(alias="hasVariants")
    is_shipping_required: bool = Field(alias="isShippingRequired")
    is_digital: bool = Field(alias="isDigital")
    kind: ProductTypeKindEnum


class GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariantProductCategory(
    BaseModel
):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    seo_title: Optional[str] = Field(alias="seoTitle")
    seo_description: Optional[str] = Field(alias="seoDescription")
    name: str
    description: Optional[Any]
    slug: str
    level: int
    description_json: Optional[Any] = Field(alias="descriptionJson")
    updated_at: Any = Field(alias="updatedAt")


GetWarehouseWithStocks.model_rebuild()
GetWarehouseWithStocksWarehouse.model_rebuild()
GetWarehouseWithStocksWarehouseStocks.model_rebuild()
GetWarehouseWithStocksWarehouseStocksEdges.model_rebuild()
GetWarehouseWithStocksWarehouseStocksEdgesNode.model_rebuild()
GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariant.model_rebuild()
GetWarehouseWithStocksWarehouseStocksEdgesNodeProductVariantProduct.model_rebuild()
