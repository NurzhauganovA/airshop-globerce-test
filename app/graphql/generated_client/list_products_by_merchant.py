# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ProductMediaType


class ListProductsByMerchant(BaseModel):
    products: Optional["ListProductsByMerchantProducts"]


class ListProductsByMerchantProducts(BaseModel):
    total_count: Optional[int] = Field(alias="totalCount")
    edges: List["ListProductsByMerchantProductsEdges"]
    page_info: "ListProductsByMerchantProductsPageInfo" = Field(alias="pageInfo")


class ListProductsByMerchantProductsEdges(BaseModel):
    cursor: str
    node: "ListProductsByMerchantProductsEdgesNode"


class ListProductsByMerchantProductsEdgesNode(BaseModel):
    id: str
    seo_title: Optional[str] = Field(alias="seoTitle")
    seo_description: Optional[str] = Field(alias="seoDescription")
    name: str
    description: Optional[Any]
    slug: str
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    charge_taxes: bool = Field(alias="chargeTaxes")
    rating: Optional[float]
    channel: Optional[str]
    description_json: Optional[Any] = Field(alias="descriptionJson")
    is_available: Optional[bool] = Field(alias="isAvailable")
    external_reference: Optional[str] = Field(alias="externalReference")
    category: Optional["ListProductsByMerchantProductsEdgesNodeCategory"]
    product_type: "ListProductsByMerchantProductsEdgesNodeProductType" = Field(
        alias="productType"
    )
    default_variant: Optional[
        "ListProductsByMerchantProductsEdgesNodeDefaultVariant"
    ] = Field(alias="defaultVariant")
    variants: Optional[List["ListProductsByMerchantProductsEdgesNodeVariants"]]
    media: Optional[List["ListProductsByMerchantProductsEdgesNodeMedia"]]


class ListProductsByMerchantProductsEdgesNodeCategory(BaseModel):
    id: str
    seo_title: Optional[str] = Field(alias="seoTitle")
    seo_description: Optional[str] = Field(alias="seoDescription")
    name: str
    description: Optional[Any]
    slug: str
    level: int
    description_json: Optional[Any] = Field(alias="descriptionJson")
    updated_at: Any = Field(alias="updatedAt")


class ListProductsByMerchantProductsEdgesNodeProductType(BaseModel):
    id: str
    name: str
    slug: str
    has_variants: bool = Field(alias="hasVariants")
    is_shipping_required: bool = Field(alias="isShippingRequired")
    is_digital: bool = Field(alias="isDigital")


class ListProductsByMerchantProductsEdgesNodeDefaultVariant(BaseModel):
    id: str
    metadata: List["ListProductsByMerchantProductsEdgesNodeDefaultVariantMetadata"]
    name: str
    sku: Optional[str]
    track_inventory: bool = Field(alias="trackInventory")
    quantity_limit_per_customer: Optional[int] = Field(alias="quantityLimitPerCustomer")
    channel: Optional[str]
    channel_listings: Optional[
        List["ListProductsByMerchantProductsEdgesNodeDefaultVariantChannelListings"]
    ] = Field(alias="channelListings")


class ListProductsByMerchantProductsEdgesNodeDefaultVariantMetadata(BaseModel):
    key: str
    value: str


class ListProductsByMerchantProductsEdgesNodeDefaultVariantChannelListings(BaseModel):
    price: Optional[
        "ListProductsByMerchantProductsEdgesNodeDefaultVariantChannelListingsPrice"
    ]


class ListProductsByMerchantProductsEdgesNodeDefaultVariantChannelListingsPrice(
    BaseModel
):
    currency: str
    amount: float


class ListProductsByMerchantProductsEdgesNodeVariants(BaseModel):
    id: str
    metadata: List["ListProductsByMerchantProductsEdgesNodeVariantsMetadata"]
    name: str
    sku: Optional[str]
    channel: Optional[str]
    channel_listings: Optional[
        List["ListProductsByMerchantProductsEdgesNodeVariantsChannelListings"]
    ] = Field(alias="channelListings")
    media: Optional[List["ListProductsByMerchantProductsEdgesNodeVariantsMedia"]]


class ListProductsByMerchantProductsEdgesNodeVariantsMetadata(BaseModel):
    key: str
    value: str


class ListProductsByMerchantProductsEdgesNodeVariantsChannelListings(BaseModel):
    price: Optional[
        "ListProductsByMerchantProductsEdgesNodeVariantsChannelListingsPrice"
    ]


class ListProductsByMerchantProductsEdgesNodeVariantsChannelListingsPrice(BaseModel):
    currency: str
    amount: float


class ListProductsByMerchantProductsEdgesNodeVariantsMedia(BaseModel):
    id: str
    sort_order: Optional[int] = Field(alias="sortOrder")
    alt: str
    type: ProductMediaType
    oembed_data: Any = Field(alias="oembedData")
    product_id: Optional[str] = Field(alias="productId")
    metadata: List["ListProductsByMerchantProductsEdgesNodeVariantsMediaMetadata"]
    url: str


class ListProductsByMerchantProductsEdgesNodeVariantsMediaMetadata(BaseModel):
    key: str
    value: str


class ListProductsByMerchantProductsEdgesNodeMedia(BaseModel):
    id: str
    sort_order: Optional[int] = Field(alias="sortOrder")
    alt: str
    type: ProductMediaType
    oembed_data: Any = Field(alias="oembedData")
    url: str
    product_id: Optional[str] = Field(alias="productId")


class ListProductsByMerchantProductsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")
    end_cursor: Optional[str] = Field(alias="endCursor")


ListProductsByMerchant.model_rebuild()
ListProductsByMerchantProducts.model_rebuild()
ListProductsByMerchantProductsEdges.model_rebuild()
ListProductsByMerchantProductsEdgesNode.model_rebuild()
ListProductsByMerchantProductsEdgesNodeDefaultVariant.model_rebuild()
ListProductsByMerchantProductsEdgesNodeDefaultVariantChannelListings.model_rebuild()
ListProductsByMerchantProductsEdgesNodeVariants.model_rebuild()
ListProductsByMerchantProductsEdgesNodeVariantsChannelListings.model_rebuild()
ListProductsByMerchantProductsEdgesNodeVariantsMedia.model_rebuild()
