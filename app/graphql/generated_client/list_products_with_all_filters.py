# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel


class ListProductsWithAllFilters(BaseModel):
    products: Optional["ListProductsWithAllFiltersProducts"]


class ListProductsWithAllFiltersProducts(BaseModel):
    total_count: Optional[int] = Field(alias="totalCount")
    page_info: "ListProductsWithAllFiltersProductsPageInfo" = Field(alias="pageInfo")
    edges: List["ListProductsWithAllFiltersProductsEdges"]


class ListProductsWithAllFiltersProductsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")
    end_cursor: Optional[str] = Field(alias="endCursor")


class ListProductsWithAllFiltersProductsEdges(BaseModel):
    cursor: str
    node: "ListProductsWithAllFiltersProductsEdgesNode"


class ListProductsWithAllFiltersProductsEdgesNode(BaseModel):
    id: str
    metafields: Optional[Any]
    name: str
    product_type: "ListProductsWithAllFiltersProductsEdgesNodeProductType" = Field(
        alias="productType"
    )
    default_variant: Optional[
        "ListProductsWithAllFiltersProductsEdgesNodeDefaultVariant"
    ] = Field(alias="defaultVariant")
    thumbnail: Optional["ListProductsWithAllFiltersProductsEdgesNodeThumbnail"]
    product_variants: Optional[
        "ListProductsWithAllFiltersProductsEdgesNodeProductVariants"
    ] = Field(alias="productVariants")


class ListProductsWithAllFiltersProductsEdgesNodeProductType(BaseModel):
    name: str


class ListProductsWithAllFiltersProductsEdgesNodeDefaultVariant(BaseModel):
    id: str
    name: str
    sku: Optional[str]
    channel_listings: Optional[
        List["ListProductsWithAllFiltersProductsEdgesNodeDefaultVariantChannelListings"]
    ] = Field(alias="channelListings")


class ListProductsWithAllFiltersProductsEdgesNodeDefaultVariantChannelListings(
    BaseModel
):
    price: Optional[
        "ListProductsWithAllFiltersProductsEdgesNodeDefaultVariantChannelListingsPrice"
    ]


class ListProductsWithAllFiltersProductsEdgesNodeDefaultVariantChannelListingsPrice(
    BaseModel
):
    currency: str
    amount: float


class ListProductsWithAllFiltersProductsEdgesNodeThumbnail(BaseModel):
    url: str
    alt: Optional[str]


class ListProductsWithAllFiltersProductsEdgesNodeProductVariants(BaseModel):
    total_count: Optional[int] = Field(alias="totalCount")


ListProductsWithAllFilters.model_rebuild()
ListProductsWithAllFiltersProducts.model_rebuild()
ListProductsWithAllFiltersProductsEdges.model_rebuild()
ListProductsWithAllFiltersProductsEdgesNode.model_rebuild()
ListProductsWithAllFiltersProductsEdgesNodeDefaultVariant.model_rebuild()
ListProductsWithAllFiltersProductsEdgesNodeDefaultVariantChannelListings.model_rebuild()
