# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import WarehouseClickAndCollectOptionEnum


class ListWarehousesByIDs(BaseModel):
    warehouses: Optional["ListWarehousesByIDsWarehouses"]


class ListWarehousesByIDsWarehouses(BaseModel):
    total_count: Optional[int] = Field(alias="totalCount")
    page_info: "ListWarehousesByIDsWarehousesPageInfo" = Field(alias="pageInfo")
    edges: List["ListWarehousesByIDsWarehousesEdges"]


class ListWarehousesByIDsWarehousesPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")
    end_cursor: Optional[str] = Field(alias="endCursor")


class ListWarehousesByIDsWarehousesEdges(BaseModel):
    cursor: str
    node: "ListWarehousesByIDsWarehousesEdgesNode"


class ListWarehousesByIDsWarehousesEdgesNode(BaseModel):
    id: str
    metafields: Optional[Any]
    name: str
    slug: str
    email: str
    is_private: bool = Field(alias="isPrivate")
    company_name: str = Field(alias="companyName")
    click_and_collect_option: WarehouseClickAndCollectOptionEnum = Field(
        alias="clickAndCollectOption"
    )
    external_reference: Optional[str] = Field(alias="externalReference")
    address: "ListWarehousesByIDsWarehousesEdgesNodeAddress"


class ListWarehousesByIDsWarehousesEdgesNodeAddress(BaseModel):
    id: str
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    company_name: str = Field(alias="companyName")
    street_address_1: str = Field(alias="streetAddress1")
    street_address_2: str = Field(alias="streetAddress2")
    city: str
    city_area: str = Field(alias="cityArea")
    postal_code: str = Field(alias="postalCode")
    country_area: str = Field(alias="countryArea")
    phone: Optional[str]
    is_default_shipping_address: Optional[bool] = Field(
        alias="isDefaultShippingAddress"
    )
    is_default_billing_address: Optional[bool] = Field(alias="isDefaultBillingAddress")
    country: "ListWarehousesByIDsWarehousesEdgesNodeAddressCountry"


class ListWarehousesByIDsWarehousesEdgesNodeAddressCountry(BaseModel):
    code: str
    country: str


ListWarehousesByIDs.model_rebuild()
ListWarehousesByIDsWarehouses.model_rebuild()
ListWarehousesByIDsWarehousesEdges.model_rebuild()
ListWarehousesByIDsWarehousesEdgesNode.model_rebuild()
ListWarehousesByIDsWarehousesEdgesNodeAddress.model_rebuild()
