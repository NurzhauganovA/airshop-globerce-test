# Generated by ariadne-codegen on 2025-09-18 16:35
# Source: app/graphql/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AddressTypeEnum,
    CheckoutAuthorizeStatusEnum,
    CheckoutChargeStatusEnum,
    CheckoutErrorCode,
    LanguageCodeEnum,
    ShippingMethodTypeEnum,
)


class SetShippingMethodForCheckout(BaseModel):
    checkout_shipping_method_update: Optional[
        "SetShippingMethodForCheckoutCheckoutShippingMethodUpdate"
    ] = Field(alias="checkoutShippingMethodUpdate")


class SetShippingMethodForCheckoutCheckoutShippingMethodUpdate(BaseModel):
    errors: List["SetShippingMethodForCheckoutCheckoutShippingMethodUpdateErrors"]
    checkout: Optional[
        "SetShippingMethodForCheckoutCheckoutShippingMethodUpdateCheckout"
    ]


class SetShippingMethodForCheckoutCheckoutShippingMethodUpdateErrors(BaseModel):
    field: Optional[str]
    message: Optional[str]
    code: CheckoutErrorCode
    variants: Optional[List[str]]
    lines: Optional[List[str]]
    address_type: Optional[AddressTypeEnum] = Field(alias="addressType")


class SetShippingMethodForCheckoutCheckoutShippingMethodUpdateCheckout(BaseModel):
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    last_change: Any = Field(alias="lastChange")
    customer_note: str = Field(alias="customerNote")
    note: str
    discount_name: Optional[str] = Field(alias="discountName")
    translated_discount_name: Optional[str] = Field(alias="translatedDiscountName")
    voucher_code: Optional[str] = Field(alias="voucherCode")
    email: Optional[str]
    is_shipping_required: bool = Field(alias="isShippingRequired")
    quantity: int
    stock_reservation_expires: Optional[Any] = Field(alias="stockReservationExpires")
    delivery_method: Optional[
        Annotated[
            Union[
                "SetShippingMethodForCheckoutCheckoutShippingMethodUpdateCheckoutDeliveryMethodWarehouse",
                "SetShippingMethodForCheckoutCheckoutShippingMethodUpdateCheckoutDeliveryMethodShippingMethod",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="deliveryMethod")
    tax_exemption: bool = Field(alias="taxExemption")
    token: Any
    language_code: LanguageCodeEnum = Field(alias="languageCode")
    display_gross_prices: bool = Field(alias="displayGrossPrices")
    authorize_status: CheckoutAuthorizeStatusEnum = Field(alias="authorizeStatus")
    charge_status: CheckoutChargeStatusEnum = Field(alias="chargeStatus")


class SetShippingMethodForCheckoutCheckoutShippingMethodUpdateCheckoutDeliveryMethodWarehouse(
    BaseModel
):
    typename__: Literal["Warehouse"] = Field(alias="__typename")


class SetShippingMethodForCheckoutCheckoutShippingMethodUpdateCheckoutDeliveryMethodShippingMethod(
    BaseModel
):
    typename__: Literal["ShippingMethod"] = Field(alias="__typename")
    id: str
    private_metafields: Optional[Any] = Field(alias="privateMetafields")
    metafields: Optional[Any]
    type: Optional[ShippingMethodTypeEnum]
    name: str
    description: Optional[Any]
    maximum_delivery_days: Optional[int] = Field(alias="maximumDeliveryDays")
    minimum_delivery_days: Optional[int] = Field(alias="minimumDeliveryDays")
    active: bool
    message: Optional[str]


SetShippingMethodForCheckout.model_rebuild()
SetShippingMethodForCheckoutCheckoutShippingMethodUpdate.model_rebuild()
SetShippingMethodForCheckoutCheckoutShippingMethodUpdateCheckout.model_rebuild()
